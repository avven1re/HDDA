install.packages(c("corrplot", "fields", "plotrix", "RColorBrewer"))
#ggplot
install.packages("gridExtra")     #for gird ggplot(one page include more than one ggplot)
install.packages("plot3D")
h1 <- ggplot(data=iris, aes(x=Sepal.Length)) + geom_histogram()
h2 <- ggplot(data=iris, aes(x=Sepal.Length)) + geom_histogram(binwidth=1)
h3 <- ggplot(data=iris, aes(x=Sepal.Length)) +
geom_histogram(color="black", fill="blue", bins = 10)
h4 <- ggplot(data=iris, aes(x=Sepal.Length, color=Species)) + geom_histogram(binwidth = 1)
grid.arrange(h1, h2, h3, h4, nrow=1, ncol=4)
library(gridExtra)
#ggplot
install.packages("ggplot2")
library(ggplot2)
h1 <- ggplot(data=iris, aes(x=Sepal.Length)) + geom_histogram()
h2 <- ggplot(data=iris, aes(x=Sepal.Length)) + geom_histogram(binwidth=1)
h3 <- ggplot(data=iris, aes(x=Sepal.Length)) +
geom_histogram(color="black", fill="blue", bins = 10)
h4 <- ggplot(data=iris, aes(x=Sepal.Length, color=Species)) + geom_histogram(binwidth = 1)
grid.arrange(h1, h2, h3, h4, nrow=1, ncol=4)
#9/47
p <- ggplot(data=iris, aes(x=Sepal.Length))
p <- p + geom_histogram()
p + facet_grid(Species~.)
iris.mean <- aggregate(iris[,1:4], by=list(Species=iris$Species), FUN=mean)
iris.mean
mydata <- cbind(stack(iris.mean[,-1]), Species = iris.mean$Species)
mydata
ggplot(mydata, aes(x=ind, y=values, fill = Species)) +
+ geom_bar(position="dodge", stat="identity")
ggplot(mydata, aes(x=ind, y=values, fill = Species)) + geom_bar(position="dodge", stat="identity")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
#14/47
p <- ggplot(data=mtcars, aes(x=wt, y=mpg, label = rownames(mtcars)))
p + geom_point()
library(ggplot2)
#14/47
p <- ggplot(data=mtcars, aes(x=wt, y=mpg, label = rownames(mtcars)))
p + geom_point()
p + geom_text(size=3)
p + geom_label()
#17/47 Google Map
install.packages("ggmap")
library(ggmap)
register_google(key = "AIzaSyD7ExFH62Ni2cYE5Vp4939DVO6DeUKxupk", write = TRUE)
houston_center <- geocode("Houston, TX")
houston_center
has_google_key()
google_key()
ggmap_show_api_key()
#GoogleMap
install.packages("RgoogleMaps")
#GoogleMap
install.packages("RgoogleMaps")
install.packages("RgoogleMaps")
library(RgoogleMaps)
WorldMap <- GetMap(center=c(0,0), zoom =1,
destfile = "World1.png")
library(ggmap)
twmap <- get_map(location = 'Taiwan', zoom = 7, language = "zh-TW")
library(ggmap)
library(RgoogleMaps)
twmap <- get_map(location = 'Taiwan', zoom = 7, language = "zh-TW")
twmap
TaiwanMap <- GetMap(center=c(lat = 23.58, lon =120.58), zoom =7, destfile = "Taiwan1.png")
TaiwanMap <- GetMap(center=c(lat = 23.58, lon =120.58), zoom = 10, destfile = "Taiwan2.png",
maptype = "terrain")
install.packages("mapproj")
library(mapproj)
tw.map <- get_map(location = 'Taiwan', zoom = 7)
ggmap(tw.map)
tw.map.zh <- get_map(location = 'Taiwan', zoom = 7, language = "zh-TW")
ggmap(tw.map.zh)
tw.map.ntpu <- get_map(location = c(lon = 121.374925, lat = 24.943403),
zoom = 10, language = "zh-TW" , maptype = "terrain")
ggmap(tw.map.ntpu)
tw.map.ntpu <- get_map(location = c(lon = 121.374925, lat = 24.943403),
zoom = 10, language = "zh-TW" , maptype = "terrain")
ggmap(tw.map.ntpu)
tw.map.ntpu <- get_map(location = c(lon = 121.374925, lat = 24.943403),
zoom = 10, language = "zh-TW" , maptype = "terrain")
ggmap(tw.map.ntpu)
tw.map.ntpu <- get_map(location = c(lon = 121.374925, lat = 24.943403),
zoom = 20, language = "zh-TW" , maptype = "terrain")
ggmap(tw.map.ntpu)
tw.map.ntpu <- get_map(location = c(lon = 121.374925, lat = 24.943403),
zoom = 15, language = "zh-TW" , maptype = "terrain")
ggmap(tw.map.ntpu)
has_google_key()
google_key()
tw.map <- get_map(location = 'Taiwan', zoom = 7, language = "zh-TW")
tw.map <- get_map(location = 'Taiwan', zoom = 7, language = "zh-TW")
TaiwanMap <- GetMap(center=c(lat = 23.58, lon =120.58), zoom =7, destfile = "Taiwan1.png")
TaiwanMap <- GetMap(center=c(lat = 23.58, lon =120.58), zoom = 10, destfile = "Taiwan2.png", maptype = "terrain")
# 22/68
my.lat <- c(25.175339, 25.082288, 25.042185, 25.046254)
my.lon <- c(121.450003, 121.565481, 121.614548, 121.517532)
bb = qbbox(my.lat, my.lon)
print(bb)
MyMap <- GetMap.bbox(bb$lonR, bb$latR, destfile = "my.png", maptype = "roadmap")
My.markers <- cbind.data.frame(lat = my.lat, lon = my.lon)
tmp <-  PlotOnStaticMap(MyMap, lat = My.markers[,"lat"], lon = My.markers[,"lon"], destfile = "my.png", cex=2.5, pch=20, col=1:4, add=F)
MyMap <- GetMap.bbox(bb$lonR, bb$latR, destfile = "pic/my.png", maptype = "roadmap")
# 23/68 於地圖上標記
png("my2.png", 640, 640)
library(ggplot2)
library(gridExtra)
library(RgoogleMaps)
library(ggmap)
library(mapproj)
library(EBImage)
install.packages("maps")
library(maps)
install.packages("maptools")
install.packages("maps")
# 26/68 Spatial Visualization with ggplot2
library(maps); library(maptools); library(mapdata); library(mapproj)
layout(matrix(c(1,1,1,0,2,0), ncol=2), widths=c(10, 1), heights=c(1, 10, 1))
map("world2Hires", xlim=c(118, 123), ylim=c(21, 26))
install.packages("mapdata")
install.packages("maptools")
layout(matrix(c(1,1,1,0,2,0), ncol=2), widths=c(10, 1), heights=c(1, 10, 1))
map("world2Hires", xlim=c(118, 123), ylim=c(21, 26))
# 29/68
tw.map.ntpu <- get_map(location = c(lon = 121.374925, lat = 24.943403),
zoom = 10, language = "zh-TW", maptype = "terrain")
library(ggplot2)
library(gridExtra)
library(RgoogleMaps)
library(ggmap)
library(mapproj)
library(EBImage)
# 29/68
tw.map.ntpu <- get_map(location = c(lon = 121.374925, lat = 24.943403),
zoom = 10, language = "zh-TW", maptype = "terrain")
ggmap(tw.map.ntpu)
map <- get_map(location = c(lon = 121.374925, lat = 24.943403),
zoom = 10, language = "zh-TW", maptype = "toner-lite")
ggmap(map)
# 30/68
uv <- read.csv("dataset/UV_20191016130309.csv")
head(uv)
# 經緯度(度分秒) => 度數
lon.deg <- sapply((strsplit(as.character(uv$WGS84Lon), ",")), as.numeric)
lon.deg
uv$lon <- lon.deg[1, ] + lon.deg[2, ]/60 + lon.deg[3, ]/3600
lat.deg <- sapply((strsplit(as.character(uv$WGS84Lat), ",")), as.numeric)
uv$lat <- lat.deg[1, ] + lat.deg[2, ]/60 + lat.deg[3, ]/3600
tw.map <- get_map(location = 'Taiwan', zoom = 7)
ggmap(tw.map) +
geom_point(data = uv, aes(x = lon, y = lat, size = UVI), color="purple")
# 31/68
ggmap(tw.map) +
geom_point(data = uv, aes(x = lon, y = lat, size = UVI, color = UVI)) +
scale_color_continuous(low = "yellow", high = "red") +
facet_grid(~PublishAgency) +
guides(size = FALSE)
# 32/68
tpe.map.zh11 <- get_map(location = 'Taipei', zoom = 11, maptype = "roadmap", language = "zh-TW")
ggmap(tpe.map.zh11)
tpe.map.zh12 <- get_map(location = 'Taipei', zoom = 12, maptype = "roadmap", language = "zh-TW")
ggmap(tpe.map.zh12)
ggmap(tpe.map.zh12)
tpe.map.zh15 <- get_map(location = 'Taipei', zoom = 15, maptype = "roadmap", language = "zh-TW")
ggmap(tpe.map.zh15)
tpe.map.zh21 <- get_map(location = 'Taipei', zoom = 21, maptype = "roadmap", language = "zh-TW")
ggmap(tpe.map.zh21)
# 33/68
head(crime)
dim(crime)
summary(crime$offense)
library(dplyr)
rapes <- filter(crime, offense == "rape") %>%
select(date, offense, address, lon, lat)
head(rapes)
dim(rapes)
# 34/68
houston_center <- geocode("Houston, TX")
# register_google(key = "AIzaSyCuYcvrytmKLGNxxx", write = TRUE)
houston_center <- geocode("Houston, TX")
houston_center
houston_map <- get_map(houston_center, zoom = 13, maptype = "roadmap")
ggmap(houston_map)
install.packages("plyr")
library(plyr)
crime.map <- arrange(crime.map, group, order)
library(RgoogleMaps)
library(ggmap)
library(mapproj)
library(EBImage)
library(plyr)
crime.map <- arrange(crime.map, group, order)
# 44/68
TW.Pop2019 <- read.csv("TW_Population2019.csv")
# 44/68
TW.Pop2019 <- read.csv("dataset/TW_Population2019.csv")
head(TW.Pop2019)
colnames(TW.Pop2019) <- c("rank", "city", "category", "population")
ggplot(TW.Pop2019, aes(x = reorder(city, population), y = population/10000,
fill = category)) +
geom_bar(stat="identity", width=0.6) +
coord_flip() +
labs(title = "台灣縣市人口分布圖", x = "縣市", y = "人口數(萬)")
install.packages("sf")
library(sf)
taiwan.map <- st_read("dataset/gadm36_TWN_shp/gadm36_TWN_2.shp")
head(taiwan.map)
taiwan.map <- st_read("dataset/gadm36_TWN_shp/gadm36_TWN_2.shp")
taiwan.map <- st_read("dataset/gadm36_TWN_shp/gadm36_TWN_2.shp")
#繪圖基礎
par(mfrow = c(2, 3))
n <- 24
pie(rep(1,n), col=rainbow(n), main = "rainbow")
pie(rep(1,n), col=heat.colors(n), main = "heat.col")
pie(rep(1,n), col=terrain.colors(n), main = "terrain.col")
pie(rep(1,n), col=topo.colors(n), main = "topo")
pie(rep(1,n), col=cm.colors(n), main = "cm")
pie(rep(1,n), col=grey(1:n/n), main = "grey")
iris[1:10, 1:5]
summary(iris)
#Missing value
install.packages("mice")
install.packages("VIM")
library(mice)
install.packages("VIM")
library(VIM)
mydata <- airquality
mydata[4:10, 3] <- rep(NA, 7)
mydata[1:5, 4] <- NA
#17/70
mydata <- airquality
mydata[4:10, 3] <- rep(NA, 7)
mydata[1:5, 4] <- NA
summary(mydata)
md.pattern(mydata)
par(mfrow = c(1, 1))
md.pattern(mydata)
md.pattern(mydata)
mydata.aggrplot <- aggr(mydata,
col=c('lightblue','red'), numbers=TRUE,
prop = TRUE, sortVars=TRUE,
labels=names(mydata), cex.axis=.7, gap=3)
