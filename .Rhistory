mamm.m
#(b)
#Mean Substitution
mean.subst <- function(x) {
x[is.na(x)] <- mean(x, na.rm = TRUE)
x
}
mamm.m <- apply(mamm, 2, mean.subst)
matrixplot(mamm.m)
matrixplot(mamm)
#(b)
#Mean Substitution
mean.subst <- function(x) {
x[is.na(x)] <- mean(x, na.rm = TRUE)
x
}
mamm.m <- apply(mamm, 2, mean.subst)
matrixplot(mamm.m)
#kNN
mamm.kNN <- kNN(mamm, k = 5)
matrixplot(mamm.kNN)
matrixplot(mamm.kNN[1 : 6])
#kNN
mamm.kNN <- kNN(mamm, k = 5)
matrixplot(mamm.kNN[1 : 6])
?mean
#kNN with 自訂平均函數
t_mean <- function(x){
mean(x, trim = 0.2)
}
mamm.kNNt <- kNN(mamm, k = 5, numFun = t_mean)
#kNN with 自訂平均函數
t_mean <- function(x){
mean(x, trim = 0.1)
}
mamm.kNNt <- kNN(mamm, k = 5, numFun = t_mean)
mode(mamm)
mode(mamm[, 1])
View(mamm.kNNt)
matrixplot(mamm.kNNt)
t_mean <- function(x){
mean(x, trim = 0.1)
}
mamm.kNNt <- kNN(mamm, k = 5, numFun = t_mean)
#kNN with 自訂平均函數
t_mean <- function(x){
mean(x, trim = 0.1)
}
mamm.kNNt <- kNN(mamm, k = 5, numFun = t_mean)
matrixplot(mamm.kNNt)
matrixplot(mamm.kNNt[1 : 6])
#mice
mamm.mice <- mice(mamm, m = 3, maxit = 50, method = "cart")
#mice
mamm.mice <- mice(mamm, m = 3, maxit = 5, method = "cart")
library(rpart)
mamm.r <- rpart(BI-RADS ~ .medv, data = mamm[!is.na(mamm$`BI-RADS`), ], method = "class", na.action = na.omit)
mamm.r <- rpart('BI-RADS' ~ .medv, data = mamm[!is.na(mamm$`BI-RADS`), ], method = "class", na.action = na.omit)
#mice
mamm.mice <- mice(mamm, m = 3, maxit = 5, method = "cart")
?mice
#2
airf <- read.table("108-1-HDDA-MidtermExam/airfoil_self_noise.dat")
summary(airf)
names <- c("Frequency", "Angle of Attack", "Chord length", "Free stream velocity", "Ssdt", "Sspl")
summary(airf)
?lm
airf.lm <- lm(Sspl ~ Frequency + Angle of Attack + Chord length + Free stream + velocity + Ssdt, data = airf)
airf.lm <- lm('Sspl' ~ 'Frequency' + 'Angle of Attack' + 'Chord length' + 'Free stream velocity' + 'Ssdt', data = airf)
airf.lm <- lm(formula = 'Sspl' ~ 'Frequency' + 'Angle of Attack' + 'Chord length' + 'Free stream velocity' + 'Ssdt', data = airf)
airf.lm <- lm(formula = Sspl ~ Frequency + Angle of Attack + Chord length + Free stream velocity + Ssdt, data = airf)
attach(airf)
airf.lm <- lm(formula = Sspl ~ Frequency + Angle of Attack + Chord length + Free stream velocity + Ssdt, data = airf)
Sspl
summary(airf)
#2
airf <- read.table("108-1-HDDA-MidtermExam/airfoil_self_noise.dat")
names <- c("Frequency", "Angle of Attack", "Chord length", "Free stream velocity", "Ssdt", "Sspl")
airf.lm <- lm(formula = Sspl ~ Frequency + Angle of Attack + Chord length + Free stream velocity + Ssdt, data = airf)
attach(airf)
airf.lm <- lm(formula = Sspl ~ Frequency + Angle of Attack + Chord length + Free stream velocity + Ssdt, data = airf)
Sspl
#2
airf <- read.table("108-1-HDDA-MidtermExam/airfoil_self_noise.dat")
names(airf) <- c("Frequency", "Angle of Attack", "Chord length", "Free stream velocity", "Ssdt", "Sspl")
summary(airf)
airf.lm <- lm(formula = Sspl ~ Frequency + Angle of Attack + Chord length + Free stream velocity + Ssdt, data = airf)
attach(airf)
airf.lm <- lm(formula = Sspl ~ Frequency + Angle of Attack + Chord length + Free stream velocity + Ssdt, data = airf)
Sspl
names(airf) <- c("Frequency", "Angle_of_Attack", "Chord_length", "Free_stream_velocity", "Ssdt", "Sspl")
summary(airf)
airf.lm <- lm(formula = Sspl ~ Frequency + Angle_of_Attack + Chord_length + Free_stream_velocity + Ssdt, data = airf)
View(airf.lm)
plot(airf.lm$residuals)
airf.log <- apply(airf, 2, log)
plot(airflog.lm$residuals)
airflog.lm <- lm(formula = Sspl ~ Frequency + Angle_of_Attack + Chord_length + Free_stream_velocity + Ssdt, data = airf.log)
#Log
airf.log <- apply(airf, 2, log)
airflog.lm <- lm(formula = Sspl ~ Frequency + Angle_of_Attack + Chord_length + Free_stream_velocity + Ssdt, data = airf.log)
airf.log
airflog.lm <- lm(formula = Sspl ~ Frequency + Angle_of_Attack + Chord_length + Free_stream_velocity + Ssdt, data = as.data.frame(airf.log))
#Log
airf.log <- as.dataframe(apply(airf, 2, log))
#Log
airf.log <- as.data.frame(apply(airf, 2, log))
airflog.lm <- lm(formula = Sspl ~ Frequency + Angle_of_Attack + Chord_length + Free_stream_velocity + Ssdt, data = airf.log)
#SQRT*10
airf.sr <- apply(airf, 2, function(x) sqrt(x)*10)
airfsr.lm <- lm(formula = Sspl ~ Frequency + Angle_of_Attack + Chord_length + Free_stream_velocity + Ssdt, data = airf.sr)
#SQRT*10
airf.sr <- as.data.frame(apply(airf, 2, function(x) sqrt(x)*10))
airfsr.lm <- lm(formula = Sspl ~ Frequency + Angle_of_Attack + Chord_length + Free_stream_velocity + Ssdt, data = airf.sr)
plot(airfsr.lm$residuals)
plot(airfsr.lm$effects)
plot(airf.lm$effects)
plot(airf.lm$fitted.values)
plot(airfsr.lm$fitted.values)
airflog.lm <- lm(formula = Sspl ~ Frequency + Angle_of_Attack + Chord_length + Free_stream_velocity + Ssdt, data = airf.log)
airflog.lm <- lm(formula = Sspl ~ Frequency + Angle_of_Attack + Chord_length + Free_stream_velocity + Ssdt, data = airf.log, na.action = na.omit)
#log
plot(airf$Ssdt, log(airf$Ssdt))
plot(airf$Frequency, log(airf$Frequency))
plot(airf$Angle_of_Attack, log(airf$Angle_of_Attack))
plot(airf$Chord_pl, log(airf$Sspl))
plot(airf$Chord_Sspl, log(airf$Sspl))
plot(airf$Sspl, log(airf$Sspl))
#SQRT*10
sqr <- function(x){
sqrt(x) * 10
}
plot(airf$Sspl, sqr(airf$Sspl))
plot(airf$Ssdt, sqr(airf$Sspdt))
plot(airf$Ssdt, sqr(airf$Ssdt))
plot(airf$Ssdt, log(airf$Ssdt))
#log
plot(airf$Sspl, log(airf$Sspl))
plot(airf$Ssdt, log(airf$Ssdt))
plot(airf$Ssdt, sqr(airf$Ssdt))
plot(airf$Sspl, sqr(airf$Sspl))
#Box-Cox
airfbc <- boxcox(airf)
#Box-Cox
install.packages("boxcox")
plot(airf.lm$residuals)
#Box-Cox
library(MASS)
airfbc <- bc( Sspl ~ Frequency + Angle_of_Attack + Chord_length + Free_stream_velocity + Ssdt)
airfbc <- boxcox( Sspl ~ Frequency + Angle_of_Attack + Chord_length + Free_stream_velocity + Ssdt)
airfbc <- boxcox(formula = Sspl ~ Frequency + Angle_of_Attack + Chord_length + Free_stream_velocity + Ssdt)
airfbc <- boxcox(formula = Sspl ~ Frequency + Angle_of_Attack + Chord_length + Free_stream_velocity + Ssdt, data = airf)
?boxcox
airfbc <- boxcox(Sspl ~ Frequency + Angle_of_Attack + Chord_length + Free_stream_velocity + Ssdt, data = airf)
airfbc <- boxcox(Sspl ~ Frequency + Angle_of_Attack + Chord_length + Free_stream_velocity + Ssdt, data = airf, lambda = seq(-2, 2, 1/10))
#2
airf <- read.table("108-1-HDDA-MidtermExam/airfoil_self_noise.dat")
names(airf) <- c("Frequency", "Angle_of_Attack", "Chord_length", "Free_stream_velocity", "Ssdt", "Sspl")
airf.lm <- lm(formula = Sspl ~ Frequency + Angle_of_Attack + Chord_length + Free_stream_velocity + Ssdt, data = airf)
plot(airf.lm$residuals)
#log
plot(airf$Sspl, log(airf$Sspl))
plot(airf$Ssdt, log(airf$Ssdt))
#SQRT*10
sqr <- function(x){
sqrt(x) * 10
}
plot(airf$Sspl, sqr(airf$Sspl))
plot(airf$Ssdt, sqr(airf$Ssdt))
#Box-Cox
library(MASS)
airf.lm <- lm(formula = Sspl ~ Frequency + Angle_of_Attack + Chord_length + Free_stream_velocity + Ssdt, data = airf)
airfbc <- boxcox(Sspl ~ Frequency + Angle_of_Attack + Chord_length + Free_stream_velocity + Ssdt, data = airf, lambda = seq(-2, 2, 1/10))
install.packages(c("lubridate", "scatterplot3d"))
library(RgoogleMaps)
library(ggmap)
library(mapproj)
install.packages("BiocManager")
BiocManager::install("EBImage")
nt <- read.table("108-1-HDDA-MidtermExam/po0201a1ac.csv")
nt <- read.table("108-1-HDDA-MidtermExam/po0201a1ac.csv", sep = ",")
nt <- read.table("108-1-HDDA-MidtermExam/po0201a1ac.csv", sep = ",")
nt <- read.table("108-1-HDDA-MidtermExam/po0201a1ac2.csv", sep = ",")
nt
nt <- read.table("108-1-HDDA-MidtermExam/po0201a1ac2.csv", sep = ",", skip = 2)
nt
#4
#地址轉經緯度
geoPoint <- function(address, key, verbose=FALSE) {
#若未輸入地址, return錯誤
if(verbose) cat(address,"\n")
root = "https://maps.googleapis.com/maps/api/place/findplacefromtext/"
#Google編碼為UTF8, 中文要轉碼後帶入URL才會正確
address = iconv(address,"big5","utf8")
#POI API型態(XML or JSON)
return.call = "json"
sensor = "false"
#產生URL
url_gen = paste(root, return.call, "?input=", address, "&inputtype=textquery&fields=geometry&key=", key, sep = "")
#擷取網頁原始碼
html_code = fromJSON(url_gen)
#若status為OK抓取資料, 若不為OK return status
if(html_code$status=="OK") {
return(cbind(html_code$candidates$geometry$location, address))
} else {
return(paste("Status:", html_code$status, sep = " "))
}
}
covst <- read.table("108-1-HDDA-MidtermExam/SanShia7-11.csv", sep = ",")
View(covst)
covst <- read.table("108-1-HDDA-MidtermExam/SanShia7-11.csv", sep = ",", header = T)
llpos <- matrix(NaN, length(covst$門市地址), 2)
k <- 1
for (i in 1 : length(covst$門市地址)) {
templl <- geoPoint(covst$門市地址[i], "AIzaSyD7ExFH62Ni2cYE5Vp4939DVO6DeUKxupk") #放入GoogleAPI金鑰
if(sum(templl[1] == "Status: ZERO_RESULTS") == 1){
llpos[i, 1] <- NA
llpos[i, 2] <- NA
cat("遺漏", k, "個", "\n")
k <- k + 1
next()
}
else{
llpos[i, 1] <- templl[1, 1]
llpos[i, 2] <- templl[1, 2]
cat("完成,", i, "個", "\n")}
}
geoPoint <- function(address, key, verbose=FALSE) {
#若未輸入地址, return錯誤
if(verbose) cat(address,"\n")
root = "https://maps.googleapis.com/maps/api/place/findplacefromtext/"
#Google編碼為UTF8, 中文要轉碼後帶入URL才會正確
address = iconv(address,"big5","utf8")
#POI API型態(XML or JSON)
return.call = "json"
sensor = "false"
#產生URL
url_gen = paste(root, return.call, "?input=", address, "&inputtype=textquery&fields=geometry&key=", key, sep = "")
#擷取網頁原始碼
html_code = fromJSON(url_gen)
#若status為OK抓取資料, 若不為OK return status
if(html_code$status=="OK") {
return(cbind(html_code$candidates$geometry$location, address))
} else {
return(paste("Status:", html_code$status, sep = " "))
}
}
for (i in 1 : length(covst$門市地址)) {
templl <- geoPoint(covst$門市地址[i], "AIzaSyD7ExFH62Ni2cYE5Vp4939DVO6DeUKxupk") #放入GoogleAPI金鑰
if(sum(templl[1] == "Status: ZERO_RESULTS") == 1){
llpos[i, 1] <- NA
llpos[i, 2] <- NA
cat("遺漏", k, "個", "\n")
k <- k + 1
next()
}
else{
llpos[i, 1] <- templl[1, 1]
llpos[i, 2] <- templl[1, 2]
cat("完成,", i, "個", "\n")}
}
library(RgoogleMaps)
library(ggmap)
library(mapproj)
library(EBImage)
library(plyr)
library(maps)
library(maptools)
library(mapdata)
library(sf)
for (i in 1 : length(covst$門市地址)) {
templl <- geoPoint(covst$門市地址[i], "AIzaSyD7ExFH62Ni2cYE5Vp4939DVO6DeUKxupk") #放入GoogleAPI金鑰
if(sum(templl[1] == "Status: ZERO_RESULTS") == 1){
llpos[i, 1] <- NA
llpos[i, 2] <- NA
cat("遺漏", k, "個", "\n")
k <- k + 1
next()
}
else{
llpos[i, 1] <- templl[1, 1]
llpos[i, 2] <- templl[1, 2]
cat("完成,", i, "個", "\n")}
}
covst <- read.table("108-1-HDDA-MidtermExam/SanShia7-11.csv", sep = ",", header = T)
covst$門市地址
covst$門市地址[1]
#4
#地址轉經緯度
geoPoint <- function(address, key, verbose=FALSE) {
#若未輸入地址, return錯誤
if(verbose) cat(address,"\n")
root = "https://maps.googleapis.com/maps/api/place/findplacefromtext/"
#Google編碼為UTF8, 中文要轉碼後帶入URL才會正確
address = iconv(address,"big5","utf8")
#POI API型態(XML or JSON)
return.call = "json"
sensor = "false"
#產生URL
url_gen = paste(root, return.call, "?input=", address, "&inputtype=textquery&fields=geometry&key=", key, sep = "")
#擷取網頁原始碼
html_code = fromJSON(url_gen)
#若status為OK抓取資料, 若不為OK return status
if(html_code$status=="OK") {
return(cbind(html_code$candidates$geometry$location, address))
} else {
return(paste("Status:", html_code$status, sep = " "))
}
}
covst <- read.table("108-1-HDDA-MidtermExam/SanShia7-11.csv", sep = ",", header = T)
llpos <- matrix(NaN, length(covst$門市地址), 2)
k <- 1
for (i in 1 : length(covst$門市地址)) {
templl <- geoPoint(covst$門市地址[i], "AIzaSyD7ExFH62Ni2cYE5Vp4939DVO6DeUKxupk") #放入GoogleAPI金鑰
if(sum(templl[1] == "Status: ZERO_RESULTS") == 1){
llpos[i, 1] <- NA
llpos[i, 2] <- NA
cat("遺漏", k, "個", "\n")
k <- k + 1
next()
}
else{
llpos[i, 1] <- templl[1, 1]
llpos[i, 2] <- templl[1, 2]
cat("完成,", i, "個", "\n")}
}
library(jsonlite)
#地址轉經緯度
geoPoint <- function(address, key, verbose=FALSE) {
#若未輸入地址, return錯誤
if(verbose) cat(address,"\n")
root = "https://maps.googleapis.com/maps/api/place/findplacefromtext/"
#Google編碼為UTF8, 中文要轉碼後帶入URL才會正確
address = iconv(address,"big5","utf8")
#POI API型態(XML or JSON)
return.call = "json"
sensor = "false"
#產生URL
url_gen = paste(root, return.call, "?input=", address, "&inputtype=textquery&fields=geometry&key=", key, sep = "")
#擷取網頁原始碼
html_code = fromJSON(url_gen)
#若status為OK抓取資料, 若不為OK return status
if(html_code$status=="OK") {
return(cbind(html_code$candidates$geometry$location, address))
} else {
return(paste("Status:", html_code$status, sep = " "))
}
}
library(jsonlite)
covst <- read.table("108-1-HDDA-MidtermExam/SanShia7-11.csv", sep = ",", header = T)
llpos <- matrix(NaN, length(covst$門市地址), 2)
k <- 1
for (i in 1 : length(covst$門市地址)) {
templl <- geoPoint(covst$門市地址[i], "AIzaSyD7ExFH62Ni2cYE5Vp4939DVO6DeUKxupk") #放入GoogleAPI金鑰
if(sum(templl[1] == "Status: ZERO_RESULTS") == 1){
llpos[i, 1] <- NA
llpos[i, 2] <- NA
cat("遺漏", k, "個", "\n")
k <- k + 1
next()
}
else{
llpos[i, 1] <- templl[1, 1]
llpos[i, 2] <- templl[1, 2]
cat("完成,", i, "個", "\n")}
}
tw.newtaipei.zh <- get_map(location = c(lon = 121.55, lat = 25.043403), zoom = 11, language = "zh-TW" , maptype = "roadmap")
ggmap(tw.newtaipei.zh) + geom_point(data = covst, aes(x = covst$lng, covst$lat, color = "red"), size = 1.5)
covst
covst$lat <- llpos[, 1]
covst$lng <- llpos[, 2]
ggmap(tw.newtaipei.zh) + geom_point(data = covst, aes(x = covst$lng, covst$lat, color = "red"), size = 1.5)
tw.newtaipei.zh <- get_map(location = c(lon = 120.55, lat = 24.943403), zoom = 11, language = "zh-TW" , maptype = "roadmap")
ggmap(tw.newtaipei.zh) + geom_point(data = covst, aes(x = covst$lng, covst$lat, color = "red"), size = 1.5)
tw.newtaipei.zh <- get_map(location = c(lon = 120.55, lat = 24.943403), zoom = 5, language = "zh-TW" , maptype = "roadmap")
ggmap(tw.newtaipei.zh) + geom_point(data = covst, aes(x = covst$lng, covst$lat, color = "red"), size = 1.5)
tw.newtaipei.zh <- get_map(location = c(lon = 120.55, lat = 24.943403), zoom = 15, language = "zh-TW" , maptype = "roadmap")
ggmap(tw.newtaipei.zh) + geom_point(data = covst, aes(x = covst$lng, covst$lat, color = "red"), size = 1.5)
tw.newtaipei.zh <- get_map(location = c(lon = 120.55, lat = 24.943403), zoom = 9, language = "zh-TW" , maptype = "roadmap")
ggmap(tw.newtaipei.zh) + geom_point(data = covst, aes(x = covst$lng, covst$lat, color = "red"), size = 1.5)
tw.newtaipei.zh <- get_map(location = c(lon = 121.55, lat = 24.043403), zoom = 11, language = "zh-TW" , maptype = "roadmap")
ggmap(tw.newtaipei.zh) + geom_point(data = covst, aes(x = covst$lng, covst$lat, color = "red"), size = 1.5)
tw.newtaipei.zh <- get_map(location = c(lon = 121.55, lat = 25.043403), zoom = 11, language = "zh-TW" , maptype = "roadmap")
ggmap(tw.newtaipei.zh) + geom_point(data = covst, aes(x = covst$lng, covst$lat, color = "red"), size = 1.5)
ggmap(tw.newtaipei.zh) + geom_point(data = covst, aes(x = covst$lng, covst$lat, color = "red"), size = 1.5)
tw.newtaipei.zh <- get_map(location = c(lon = 121.45, lat = 25.943403), zoom = 13, language = "zh-TW" , maptype = "roadmap")
ggmap(tw.newtaipei.zh) + geom_point(data = covst, aes(x = covst$lng, covst$lat, color = "red"), size = 1.5)
tw.newtaipei.zh <- get_map(location = c(lon = 121.45, lat = 25.943403), zoom = 11, language = "zh-TW" , maptype = "roadmap")
ggmap(tw.newtaipei.zh) + geom_point(data = covst, aes(x = covst$lng, covst$lat, color = "red"), size = 1.5)
tw.newtaipei.zh <- get_map(location = c(lon = 121.55, lat = 25.043403), zoom = 11, language = "zh-TW" , maptype = "roadmap")
ggmap(tw.newtaipei.zh) + geom_point(data = covst, aes(x = covst$lng, covst$lat, color = "red"), size = 1.5)
tw.newtaipei.zh <- get_map(location = c(lon = 121.55, lat = 25.043403), zoom = 12, language = "zh-TW" , maptype = "roadmap")
ggmap(tw.newtaipei.zh) + geom_point(data = covst, aes(x = covst$lng, covst$lat, color = "red"), size = 1.5)
tw.newtaipei.zh <- get_map(location = c(lon = 121.50, lat = 25.043403), zoom = 12, language = "zh-TW" , maptype = "roadmap")
ggmap(tw.newtaipei.zh) + geom_point(data = covst, aes(x = covst$lng, covst$lat, color = "red"), size = 1.5)
tw.newtaipei.zh <- get_map(location = c(lon = 121.40, lat = 25.043403), zoom = 12, language = "zh-TW" , maptype = "roadmap")
ggmap(tw.newtaipei.zh) + geom_point(data = covst, aes(x = covst$lng, covst$lat, color = "red"), size = 1.5)
tw.newtaipei.zh <- get_map(location = c(lon = 121.40, lat = 25.0043403), zoom = 12, language = "zh-TW" , maptype = "roadmap")
tw.newtaipei.zh <- get_map(location = c(lon = 121.40, lat = 25.003403), zoom = 12, language = "zh-TW" , maptype = "roadmap")
ggmap(tw.newtaipei.zh) + geom_point(data = covst, aes(x = covst$lng, covst$lat, color = "red"), size = 1.5)
tw.newtaipei.zh <- get_map(location = c(lon = 121.40, lat = 24.953403), zoom = 12, language = "zh-TW" , maptype = "roadmap")
ggmap(tw.newtaipei.zh) + geom_point(data = covst, aes(x = covst$lng, covst$lat, color = "red"), size = 1.5)
tw.newtaipei.zh <- get_map(location = c(lon = 121.40, lat = 24.953403), zoom = 12, language = "zh-TW" , maptype = "roadmap")
ggmap(tw.newtaipei.zh) + geom_point(data = covst, aes(x = covst$lng, covst$lat, color = "red"), size = 1.5)
tw.newtaipei.zh <- get_map(location = c(lon = 121.40, lat = 24.953403), zoom = 13, language = "zh-TW" , maptype = "roadmap")
ggmap(tw.newtaipei.zh) + geom_point(data = covst, aes(x = covst$lng, covst$lat, color = "red"), size = 1.5)
tw.newtaipei.zh <- get_map(location = c(lon = 121.375, lat = 24.943403), zoom = 13, language = "zh-TW" , maptype = "roadmap")
ggmap(tw.newtaipei.zh) + geom_point(data = covst, aes(x = covst$lng, covst$lat, color = "red"), size = 1)
covst$lat <- llpos[, 1]
covst$lng <- llpos[, 2]
plot(airflog.lm$residuals)
airflog.lm <- lm(formula = Sspl ~ Frequency + Angle_of_Attack + Chord_length + Free_stream_velocity + Ssdt, data = airf.log)
plot(airfsr.lm$fitted.values)
plot(airfsr.lm$residuals)
plot(airf.lm$residuals)
airf.lm <- lm(formula = Sspl ~ Frequency + Angle_of_Attack + Chord_length + Free_stream_velocity + Ssdt, data = aqr(airf))
airf.lm <- lm(formula = Sspl ~ Frequency + Angle_of_Attack + Chord_length + Free_stream_velocity + Ssdt, data = sqr(airf))
airfsq.lm <- lm(formula = Sspl ~ Frequency + Angle_of_Attack + Chord_length + Free_stream_velocity + Ssdt, data = sqr(airf))
plot(airfsq.lm$residuals)
airf.lm <- lm(formula = Sspl ~ Frequency + Angle_of_Attack + Chord_length + Free_stream_velocity + Ssdt, data = airf)
plot(airf.lm$residuals)
plot(airfsq.lm$residuals)
install.packages(c("dr", "rgl", "vegan"))
browseURL("http://www.hmwu.idv.tw/web/R/C01-hmwu_R-DimensionReduction.pdf")
install.packages("pheatmap")
library(pheatmap)
wine <- read.table("dataset/wine.data")
wine
View(wine)
wine <- read.table("dataset/wine.data", sep = ",")
View(wine)
winename <- read.table("dataset/wine.names")
pheatmap(wine)
pheatmap(wine[, 2 : 14])
pheatmap(wine[, 2 : 14])
View(wine)
?scale
pheatmap(scale(wine[, 2 : 14]))
legend(3, 4, c("1, "2", "3"), col = c(1, 2, 3))
legend(3, 4, c("1", "2", "3"), col = c(1, 2, 3))
pheatmap(scale(wine[, 2 : 14]), annotation_row = wine[, 1])
wineclus <- wine[, 1]
names(wineclus) <- c("type")
pheatmap(scale(wine[, 2 : 14]), annotation_row = wineclus)
winen <- rep(NaN, length(wine[, 1]))
for (i in 1 : length(wine[, 1])) {
if(wine[i, 1] == 1){winen[i] <- c("type1")}
else if(wine[i, 1] == 2){winen[i] <- c("type2")}
else {winen[i] <- c("type3")}
}
wineclus <- winen
names(wineclus) <- c("type")
pheatmap(scale(wine[, 2 : 14]), annotation_row = wineclus)
?pheatmap
wineclus <- as.data.frame(winen)
names(wineclus) <- c("type")
pheatmap(scale(wine[, 2 : 14]), annotation_row = wineclus)
View(wineclus)
pheatmap(scale(wine[, 2 : 14]), annotation_row = wineclus, annotation_colors = c(1, 2, 3))
pheatmap(scale(wine[, 2 : 14]), annotation_row = wineclus, annotation_colors = c(1, 2, 3))
window()
windowed
pheatmap(scale(wine[, 2 : 14]), annotation_row = wineclus, annotation_colors = c(1, 2, 3))
windows()
pheatmap(scale(wine[, 2 : 14]), annotation_row = wineclus, annotation_colors = c(1, 2, 3))
wineclus <- as.data.frame(winen, wine[, 1])
wineclus <- as.data.frame(cbind(winen, wine[, 1]))
names(wineclus) <- c("type", "typeNO")
View(wineclus)
pheatmap(scale(wine[, 2 : 14]), annotation_row = wineclus)
windows()
pheatmap(scale(wine[, 2 : 14]), annotation_row = wineclus)
wineclus <- as.factor(cbind(winen, wine[, 1]))
names(wineclus) <- c("type", "typeNO")
pheatmap(scale(wine[, 2 : 14]), annotation_row = wineclus)
wineclus
wineclus <- as.data.fame(cbind(winen, wine[, 1]))
names(wineclus) <- c("type", "typeNO")
wineclus <- as.data.frame(cbind(winen, wine[, 1]))
names(wineclus) <- c("type", "typeNO")
pheatmap(scale(wine[, 2 : 14]), annotation_row = wineclus)
pheatmap(scale(wine[, 2 : 14]), annotation_row = wineclus[, 2])
pheatmap(scale(wine[, 2 : 14]), annotation_row = wineclus[, 1])
pheatmap(scale(wine[, 2 : 14]), annotation_row = wineclus[, 1])
pheatmap(scale(wine[, 2 : 14]), annotation_row = wineclus[, 1])
wineclus <- as.data.frame(cbind(winen, wine[, 1]))
names(wineclus) <- c("type", "typeNO")
pheatmap(scale(wine[, 2 : 14]), annotation_row = wineclus[, 1])
pheatmap(scale(wine[, 2 : 14]), annotation_row = wineclus)
row.names(wineclus) <- paste0("row_", seq(nrow(wineclus)))
pheatmap(scale(wine[, 2 : 14]), annotation_row = wineclus)
View(wineclus)
wineclus <- as.matrix(cbind(winen, wine[, 1]))
names(wineclus) <- c("type", "typeNO")
pheatmap(scale(wine[, 2 : 14]), annotation_row = wineclus)
wineclus <- as.matrix(cbind(winen, wine[, 1]))
names(wineclus) <- c("type", "typeNO")
row.names(wineclus) <- paste0("row_", seq(nrow(wineclus)))
pheatmap(scale(wine[, 2 : 14]), annotation_row = wineclus)
wineclus <- as.matrix(cbind(winen, wine[, 1]))
names(wineclus) <- c("type", "typeNO")
row.names(wineclus) <- paste0("row_", seq(nrow(wineclus)))
windows()
pheatmap(scale(wine[, 2 : 14]), annotation_row = wineclus)
pheatmap(scale(wine[, 2 : 14]), annotation_row = wineclus)
windows()
pheatmap(scale(wine[, 2 : 14]), annotation_row = wineclus)
wineclus <- as.matrix(cbind(winen, wine[, 1]))
names(wineclus) <- c("type", "typeNO")
row.names(wineclus) <- paste0("row_", seq(nrow(wineclus)))
windows()
pheatmap(scale(wine[, 2 : 14]), annotation_row = wineclus)
